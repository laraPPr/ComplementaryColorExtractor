/*
Copyright 2018 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const arrayUtils= {
    clone:function(d) {
        var e=d.length;
        if(0<e){
            for(var f=Array(e),h=0;h<e;h++)f[h]=d[h];
            return f}return[]
    },
    
    repeat:function(d,e) {
        for(var f=[],h=0;h<e;h++)f[h]=d;
        return f}
    
};

const vec3Utils = {
    
};


vec3Utils.add=function(d,e,f) {
    return f[0] = d[0] + e[0], f[1] = d[1] + e[1], f[2] = d[2] + e[2], f
    
},
vec3Utils.scale=function(d,e,f) {
    return f[0]=d[0]*e,f[1]=d[1]*e,f[2]=d[2]*e,f
    
},
vec3Utils.distanceSquared=function(d,e) {
    var f=d[0]-e[0],h=d[1]-e[1],j=d[2]-e[2];
    return f*f+h*h+j*j },
vec3Utils.setFromArray=function(d,e) {
    return d[0]=e[0],d[1]=e[1],d[2]=e[2],d},
vec3Utils.createFloat32FromArray=function(d){
    var e=new Float32Array(3);
    return vec3Utils.setFromArray(e,d),e},
vec3Utils.cloneFloat32=vec3Utils.createFloat32FromArray;

class PaletteExtractor{
    constructor() {
        this.labs_=[],
        this.weights_=[],
        this.seeds_=[],
        this.seedWeights_=[]
        
    }
    processImageData(d,e=7) {
        return this.computeHistogramFromImageData_(d),
        this.selectSeeds_(e),
        this.clusterColors_(),
        this.exportPalette_()
        
    }
    computeHistogramFromImageData_(d) {
        const e=d.length;
        this.labs_=[],
        this.weights_=arrayUtils.repeat(0,PaletteExtractor.HISTOGRAM_SIZE_);/** hier wordt een bin gemaakt voorlopig elke index gevuld met nullen */
        for(let f=0;f<e;f+=4) {
            const h=d[f], /** red */
            j=d[f+1], /** green */
            k=d[f+2], /** blue */
            o=vec3Utils.createFloat32FromArray(this.rgbToLab(h,j,k)),
            q=16*(16*Math.floor(h/16)+Math.floor(j/16))+Math.floor(k/16);
            /** q is de index voor de array */
            q in this.labs_?vec3Utils.add(this.labs_[q],o,this.labs_[q]):this.labs_[q]=o,this.weights_[q]++
            
        } /**  computeHistogramFromImageData_(d) voegt aan labs_ in een specifieke idex q een float32Array toe. deze bevat de opgetelde o waardes. per kleur die toegevoegd wordt aan 1 bepaald index van labs_ wordt plus 1 gedaan in de weights array in de specifieke index q */
        
    }
    selectSeeds_(d) {
        this.seeds_=[];
        const e=arrayUtils.clone(this.weights_);
        let f,h=0;
        for (let j = 0; j < d && (h = this.getHeaviestIndex_(e), 0!=e[h]); ++j) f = this.addSeedByIndex_(h), e[h]=0, this.attenuateWeightsAroundSeed_(e,f)
            
    }
    clusterColors_() {
        if(!this.seeds_.length)throw Error('Please select seeds before clustering');
        const d=arrayUtils.repeat(0,PaletteExtractor.HISTOGRAM_SIZE_);
        let e=[];
        this.seedWeights_=[];
        for(let f=!1,h=0;!f;) {
            for(f=!0,e=[],this.seedWeights_=arrayUtils.repeat(0,this.seeds_.length),h=0;h<PaletteExtractor.HISTOGRAM_SIZE_;h++)if(0!=this.weights_[h]){
                const j=this.getClosestSeedIndex_(h);f&&j!=d[h]&&(f=!1),
                d[h]=j,this.addColorToSeed_(e,j,h)}
            this.updateSeedsWithNewSeeds_(e)
    }
    }
    exportPalette_() {
            if(!this.seeds_.length)throw Error('Please select seeds and get clusters before exporting a new palette');
            const d=[];
            for(let e=0;e<this.seeds_.length;e++) {
                const f=this.labToRgb(this.seeds_[e][0],this.seeds_[e][1],this.seeds_[e][2]);
                d.push(this.rgbToHex(f[0],f[1],f[2]))}
            return d
        }
    attenuateWeightsAroundSeed_(d,e) {
            for(let h=0; h < PaletteExtractor.HISTOGRAM_SIZE_; h++) if(0 < this.weights_[h]) {
                const j = vec3Utils.createFloat32FromArray([0,0,0]);
                vec3Utils.scale(this.labs_[h],1/this.weights_[h],j),d[h]*=1-Math.exp(-vec3Utils.distanceSquared(e,j)/3650)
                
            }
            
            }
        addSeedByIndex_(d) {
                const e=vec3Utils.createFloat32FromArray([0,0,0]);
                return vec3Utils.scale(this.labs_[d],1/this.weights_[d],e),this.seeds_.push(e),e
                                       
        }
        getHeaviestIndex_(d) {
                    let e=0,f=0;
                    for(let h=0;h<PaletteExtractor.HISTOGRAM_SIZE_;h++)d[h]>e&&(e=d[h],f=h);
                    return f }
        addColorToSeed_(d,e,f) {
                    e in d||(d[e]=vec3Utils.createFloat32FromArray([0,0,0])),
                    vec3Utils.add(d[e],
                    this.labs_[f],d[e]),
                    this.seedWeights_[e]+=this.weights_[f]
        }
        updateSeedsWithNewSeeds_(d) {
            for(let e=0;e<this.seeds_.length;e++)e in d||(d[e]=vec3Utils.createFloat32FromArray([0,0,0])),
            0==this.seedWeights_[e]?d[e]=vec3Utils.createFloat32FromArray([0,0,0]):vec3Utils.scale(d[e],
            1/this.seedWeights_[e],d[e]),
            this.seeds_[e]=vec3Utils.cloneFloat32(d[e])
            }
        getClosestSeedIndex_(d) {
            const e=vec3Utils.cloneFloat32(this.labs_[d]);
            vec3Utils.scale(e,1/this.weights_[d],e);
            let f=Number.MAX_SAFE_INTEGER,h=0;
            for(let j=0;j<this.seeds_.length;j++) {
                const k=vec3Utils.distanceSquared(this.seeds_[j],e);
                k<f&&(f=k,h=j)
                }
            return h}
        componentToHex(d) {
            var e=d.toString(16);
            return 1==e.length?'0'+e:e
            }
        rgbToHex(d,e,f) {
            if(d=+d,e=+e,f=+f,d!=(255&d)||e!=(255&e)||f!=(255&f))throw Error('"('+d+','+e+','+f+'") is not a valid RGB color');
            const h=this.componentToHex(d),
            j=this.componentToHex(e),
            k=this.componentToHex(f);
            return'#'+h+j+k
            }
        
                            
                            
        rgbToLab(d,e,f) {
            d/=255,e/=255,f/=255;
            const h=this.rgbToXyz(d,e,f);
            return this.xyzToLab(h[0],h[1],h[2])}
        labToRgb(d,e,f) {
            const h=this.labToXyz(d,e,f),
            j=this.xyzToRgb(h[0],h[1],h[2]);
            return[Math.min(255,Math.max(0,Math.round(255*j[0]))),Math.min(255,Math.max(0,Math.round(255*j[1]))),Math.min(255,Math.max(0,Math.round(255*j[2])))]
            }
        xyzToRgb(d,e,f) {
            d/=100,e/=100,f/=100;
            let h=3.2406*d+-1.5372*e+-0.4986*f,
            j=-0.9689*d+1.8758*e+0.0415*f,
            k=0.0557*d+-0.204*e+1.057*f;
            return h=0.0031308<h?1.055*Math.pow(h,1/2.4)-.055:12.92*h,j=0.0031308<j?1.055*Math.pow(j,1/2.4)-.055:12.92*j,k=0.0031308<k?1.055*Math.pow(k,1/2.4)-.055:12.92*k,[h,j,k]
            }
        labToXyz(d,e,f) {
            const h=(d+16)/116;
            return[PaletteExtractor.REF_X*Math.pow(h+e/500,3),PaletteExtractor.REF_Y*Math.pow(h,3),PaletteExtractor.REF_Z*Math.pow(h-f/200,3)]
            }
        xyzToLab(d,e,f) {
            const h=d/PaletteExtractor.REF_X,j=e/PaletteExtractor.REF_Y,k=f/PaletteExtractor.REF_Z;
            return[0.008856<j?116*Math.pow(j,1/3)-16:903.3*j,500*(this.transformation(h)-this.transformation(j)),200*(this.transformation(j)-this.transformation(k))]
            }
        rgbToXyz(d,e,f) {
            return 0.04045<d?d=Math.pow((d+.055)/1.055,2.4):d/=12.92,0.04045<e?e=Math.pow((e+.055)/1.055,2.4):e/=12.92,0.04045<f?f=Math.pow((f+.055)/1.055,2.4):f/=12.92,d*=100,e*=100,f*=100,[0.4124*d+0.3576*e+0.1805*f,0.2126*d+0.7152*e+0.0722*f,0.0193*d+0.1192*e+0.9505*f]
            }
        transformation(d) {
            return 0.008856<d?Math.pow(d,1/3):7.787*d+16/116
            }
    }
PaletteExtractor.HISTOGRAM_SIZE_=4096,PaletteExtractor.REF_X=95.047,PaletteExtractor.REF_Y=100,PaletteExtractor.REF_Z=108.883,exports=PaletteExtractor;
